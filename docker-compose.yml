version: "2.27.0"
services:
  db_students:
    image: postgres
    container_name: db_students
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: students
      PGDATA: /var/lib/postgresql/data_students
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./db/data_students:/var/lib/postgresql/data_students
    restart: always

  db_users:
    image: postgres
    container_name: db_users
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: users
      PGDATA: /var/lib/postgresql/data_users
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./db/data_users:/var/lib/postgresql/data_users
    restart: always

  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-storage:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092,OUTSIDE://localhost:9093
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    healthcheck:
      test: [ "CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:9092" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - zookeeper

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"

  student:
    build:
      context: ./services/student
      dockerfile: Dockerfile
    volumes:
      - ./photo:/student/photo
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db_students:5432/students
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      MINIO_URL: http://minio:9000
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
    container_name: student
    depends_on:
      minio:
        condition: service_healthy
      db_students:
        condition: service_healthy
      kafka:
        condition: service_healthy

  user:
    build:
      context: ./services/user
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db_users:5432/users
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_KAFKA_BOOTSTRAPSERVERS: kafka:9092
    container_name: user
    depends_on:
      db_users:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  minio-storage: